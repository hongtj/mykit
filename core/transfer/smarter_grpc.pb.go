// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v3.21.1
// source: smarter.proto

package transfer

import (
	context "context"

	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion5

const (
	Smarter_Call_FullMethodName = "/smarter.Smarter/Call"
)

// SmarterClient is the client API for Smarter service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type SmarterClient interface {
	Call(ctx context.Context, in *Req, opts ...grpc.CallOption) (*Res, error)
}

type smarterClient struct {
	cc *grpc.ClientConn
}

func SmarterGrpc(cc *grpc.ClientConn) SmarterClient {
	return &smarterClient{cc}
}

func (c *smarterClient) Call(ctx context.Context, in *Req, opts ...grpc.CallOption) (*Res, error) {
	out := new(Res)
	err := c.cc.Invoke(ctx, Smarter_Call_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// SmarterServer is the server API for Smarter service.
// All implementations must embed UnimplementedSmarterServer
// for forward compatibility
type SmarterServer interface {
	Call(context.Context, *Req) (*Res, error)
	mustEmbedUnimplementedSmarterServer()
}

// UnimplementedSmarterServer must be embedded to have forward compatible implementations.
type UnimplementedSmarterServer struct {
}

func (UnimplementedSmarterServer) Call(context.Context, *Req) (*Res, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Call not implemented")
}
func (UnimplementedSmarterServer) mustEmbedUnimplementedSmarterServer() {}

// UnsafeSmarterServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to SmarterServer will
// result in compilation errors.
type UnsafeSmarterServer interface {
	mustEmbedUnimplementedSmarterServer()
}

func RegisterSmarterServer(s grpc.Server, srv SmarterServer) {
	s.RegisterService(&Smarter_ServiceDesc, srv)
}

func _Smarter_Call_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Req)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SmarterServer).Call(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Smarter_Call_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SmarterServer).Call(ctx, req.(*Req))
	}
	return interceptor(ctx, in, info, handler)
}

// Smarter_ServiceDesc is the grpc.ServiceDesc for Smarter service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Smarter_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "smarter.Smarter",
	HandlerType: (*SmarterServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Call",
			Handler:    _Smarter_Call_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "smarter.proto",
}
